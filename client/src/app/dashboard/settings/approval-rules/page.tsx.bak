"use client";

import { useEffect, useMemo, useState } from "react";
import { useAppContext } from "@/context/app-context";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import type { ApprovalPolicyDTO } from "@/lib/definitions";

export default function ApprovalRulesPage() {
  const { users, currentCompany } = useAppContext();
  const [selectedUserId, setSelectedUserId] = useState<string | undefined>(undefined);
  const [category, setCategory] = useState<string | undefined>(undefined);
  const [description, setDescription] = useState("");
  const [isManagerApprover, setIsManagerApprover] = useState(false);
  const [managerFirst, setManagerFirst] = useState(false);
  const [sequential, setSequential] = useState(false);
  const [minApprovalPercentage, setMinApprovalPercentage] = useState<number | undefined>(undefined);
  const [approvers, setApprovers] = useState<Array<{ approverId: string; required: boolean; order: number }>>([]);

  const companyUsers = useMemo(() => users.filter(u => u.companyId === currentCompany?.id), [users, currentCompany]);
  const selectedUser = companyUsers.find(u => u.id === selectedUserId);

  useEffect(() => {
    // prefill approvers with manager if present when toggled
    if (isManagerApprover && selectedUser) {
      // We don't have managerId in client model yet; kept for future when exposed
    }
  }, [isManagerApprover, selectedUser]);

  function addApprover() {
    setApprovers(prev => [...prev, { approverId: "", required: false, order: prev.length }]);
  }

  function updateApprover(idx: number, patch: Partial<{ approverId: string; required: boolean; order: number }>) {
    setApprovers(prev => prev.map((a, i) => (i === idx ? { ...a, ...patch } : a)));
  }

  function removeApprover(idx: number) {
    setApprovers(prev => prev.filter((_, i) => i !== idx).map((a, i) => ({ ...a, order: i })));
  }

  async function savePolicy() {
    if (!currentCompany) return;
    const payload: ApprovalPolicyDTO = {
      companyId: currentCompany.id,
      userId: selectedUserId ?? null,
      category: category ?? null,
      description,
      isManagerApprover,
      managerFirst,
      sequential,
      minApprovalPercentage: minApprovalPercentage ?? null,
      approvers: approvers.filter(a => a.approverId),
    };

    const res = await fetch("/api/approval-policies", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(payload) });
    if (!res.ok) {
      console.error(await res.text());
      return;
    }
    // simplistic reset
    alert("Policy saved");
  }

  return (
    <div className="flex flex-col gap-6">
      <h1 className="text-2xl font-headline font-semibold">Approval Rules</h1>
      <Card>
        <CardHeader>
          <CardTitle>Create approval policy</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label>User</Label>
              <Select value={selectedUserId} onValueChange={setSelectedUserId}>
                <SelectTrigger className="mt-1"><SelectValue placeholder="Select user (optional: leave empty for company-wide)" /></SelectTrigger>
                <SelectContent>
                  {companyUsers.map(u => (
                    <SelectItem key={u.id} value={u.id}>{u.name} ({u.email})</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label>Category</Label>
              <Input className="mt-1" placeholder="e.g. miscellaneous" value={category ?? ""} onChange={e => setCategory(e.target.value || undefined)} />
            </div>
          </div>

          <div>
            <Label>Description</Label>
            <Input className="mt-1" placeholder="Description about rules" value={description} onChange={e => setDescription(e.target.value)} />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <Checkbox checked={isManagerApprover} onCheckedChange={v => setIsManagerApprover(!!v)} id="mgr" />
                <Label htmlFor="mgr">Is manager an approver?</Label>
              </div>
              <div className="flex items-center gap-2">
                <Checkbox checked={managerFirst} onCheckedChange={v => setManagerFirst(!!v)} id="mgrfirst" />
                <Label htmlFor="mgrfirst">Manager first</Label>
              </div>
              <div className="flex items-center gap-2">
                <Checkbox checked={sequential} onCheckedChange={v => setSequential(!!v)} id="seq" />
                <Label htmlFor="seq">Approvers sequence</Label>
              </div>
              <div>
                <Label>Minimum Approval Percentage</Label>
                <Input className="mt-1" type="number" min={0} max={100} value={minApprovalPercentage ?? ""} onChange={e => setMinApprovalPercentage(e.target.value ? Number(e.target.value) : undefined)} />
              </div>
            </div>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label>Approvers</Label>
                <Button variant="secondary" onClick={addApprover}>Add</Button>
              </div>
              <div className="space-y-3">
                {approvers.map((a, idx) => (
                  <div key={idx} className="grid grid-cols-[1fr_auto_auto_auto] items-center gap-2">
                    <Select value={a.approverId} onValueChange={(v) => updateApprover(idx, { approverId: v })}>
                      <SelectTrigger><SelectValue placeholder="Select approver" /></SelectTrigger>
                      <SelectContent>
                        {companyUsers.map(u => (
                          <SelectItem key={u.id} value={u.id}>{u.name}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <div className="flex items-center gap-2">
                      <Checkbox checked={a.required} onCheckedChange={v => updateApprover(idx, { required: !!v })} id={`req-${idx}`} />
                      <Label htmlFor={`req-${idx}`}>Required</Label>
                    </div>
                    <Input type="number" value={a.order} onChange={e => updateApprover(idx, { order: Number(e.target.value) })} className="w-16" />
                    <Button variant="ghost" onClick={() => removeApprover(idx)}>Remove</Button>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className="flex justify-end">
            <Button onClick={savePolicy}>Save Policy</Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
